name: Build and Release Project

on:
  push:
    branches: [ master ] 
  pull_request:
    branches: [ master ]
  release:
    types: [ created ] 

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            build_type: Release
          - os: macos-latest
            generator: "Unix Makefiles"
            build_type: Release
          - os: windows-latest
            generator: "NMake Makefiles"
            build_type: Release
            vs_version: 2022 # Windows使用Visual Studio 2022

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive # 递归初始化子模块

      - name: Set up environment
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          sudo apt-get update && sudo apt-get install -y cmake build-essential libtbb-dev || true

      - name: Configure CMake
        working-directory: ./build
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            ${{ if eq(matrix.os, 'Windows') }}-A x64${{ endif }}

      - name: Build project
        working-directory: ./build
        run: |
          cmake --build . --config ${{ matrix.build_type }} -- -j $(nproc) 2>/dev/null || cmake --build . --config ${{ matrix.build_type }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/**
          retention-days: 7

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: Create Release Archive
        run: |
          mkdir -p release-packages
          cd release-packages
          # 处理Linux包
          if [ -d ../artifacts/build-ubuntu-latest-Release ]; then
            cp -r ../artifacts/build-ubuntu-latest-Release/* linux-release/
            tar czvf ${GITHUB_REPOSITORY##*/}-linux-${GITHUB_REF_NAME}.tar.gz linux-release/
          fi
          # 处理macOS包
          if [ -d ../artifacts/build-macos-latest-Release ]; then
            cp -r ../artifacts/build-macos-latest-Release/* macos-release/
            tar czvf ${GITHUB_REPOSITORY##*/}-macos-${GITHUB_REF_NAME}.tar.gz macos-release/
          fi
          # 处理Windows包
          if [ -d ../artifacts/build-windows-latest-Release ]; then
            cp -r ../artifacts/build-windows-latest-Release/* windows-release/
            zip -r ${GITHUB_REPOSITORY##*/}-windows-${GITHUB_REF_NAME}.zip windows-release/
          fi

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release-packages/*.{tar.gz,zip}
          generate_release_notes: true
          fail_on_unused_files: false